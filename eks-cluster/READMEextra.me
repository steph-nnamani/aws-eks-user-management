AWS's Elastic Kubernetes Service (EKS) is a managed service that lets you deploy, manage, 
and scale containerized applications on Kubernetes.

In this tutorial, you will deploy an EKS cluster using Terraform. Then, you will configure 
kubectl using Terraform output and verify that your cluster is ready to use.

Why deploy with Terraform?
While you could use the built-in AWS provisioning processes (UI, CLI, CloudFormation) for EKS clusters,
 Terraform provides you with several benefits:

Unified Workflow - If you already use Terraform to deploy AWS infrastructure, you can use the same
 workflow to deploy both EKS clusters and applications into those clusters.

Full Lifecycle Management - Terraform creates, updates, and deletes tracked resources without 
requiring you to inspect an API to identify those resources.

Graph of Relationships - Terraform determines and observes dependencies between resources. 
For example, if an AWS Kubernetes cluster needs a specific VPC and subnet configurations, 
Terraform will not attempt to create the cluster if it fails to provision the VPC and subnet first.

For this tutorial, you will need:

Terraform v1.3+ installed locally.
an AWS account
the AWS CLI v2.7.0/v1.24.0 or newer, installed and configured
AWS IAM Authenticator
kubectl v1.24.0 or newer


Original sourceCode repo
=========================
git clone https://github.com/hashicorp/learn-terraform-provision-eks-cluster


This example repository contains configuration to provision a VPC, security groups, and an 
EKS cluster with the following architecture:

An overview of the EKS installation with VPC, three public subnets communicating with 
three private subnets with an EKS cluster across different Availability Zones.

The configuration defines a new VPC in which to provision the cluster, and uses the 
public EKS module to create the required resources, including Auto Scaling Groups, 
security groups, and IAM Roles and Policies.


WORKFLOWS

Open the main.tf file to review the module configuration. The eks_managed_node_groups 
parameter configures the cluster with three nodes across two node groups.

Open your terraform.tf file and comment out the cloud block that configures the 
Terraform Cloud integration.

Initialize this configuration.

Provision the EKS cluster
Run terraform apply to create your cluster and other necessary resources. Confirm the operation with a yes.

This process can take up to 10 minutes. Upon completion, Terraform will print your configuration's outputs.

Configure kubectl
After provisioning your cluster, you need to configure kubectl to interact with it.

First, open the outputs.tf file to review the output values. You will use the region and cluster_name outputs 
to configure kubectl.

## yOU CAN RUN THIS COMMAND IN A LOCAL ENVIRONMENT PROPERLY CONFIGURED AS PER REQUIREMENT - AWSCLI, 
Run the following command to retrieve the access credentials for your cluster and configure kubectl.

aws eks --region $(terraform output -raw region) update-kubeconfig \
    --name $(terraform output -raw cluster_name)

aws eks --region "us-east-1" update-kubeconfig \
    --name "education-eks-m2vhEwcx"

You can now use kubectl to manage your cluster and deploy Kubernetes configurations to it.

First, get information about the cluster.
kubectl cluster-info

Notice that the Kubernetes control plane location matches the cluster_endpoint value from the terraform apply output above.

Now verify that all three worker nodes are part of the cluster.

kubectl get nodes

You have verified that you can connect to your cluster using kubectl and that all three worker nodes are healthy. Your cluster is ready to use.

Clean up your workspace

REFERENCES
==========
https://developer.hashicorp.com/terraform/tutorials/kubernetes/eks
https://developer.hashicorp.com/terraform/tutorials/kubernetes/kubernetes-provider










